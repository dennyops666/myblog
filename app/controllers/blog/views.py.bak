"""
文件名：views.py
描述：博客前台视图
作者：denny
"""

from flask import (
    render_template, request, redirect, url_for, flash, 
    abort, current_app, jsonify, session
)
from flask_login import current_user, login_user, logout_user, login_required
from app.services.post import PostService
from app.services.comment import CommentService
from app.services.tag import TagService
from app.services.user import UserService
from app.forms import CommentForm
from app.forms.auth import LoginForm
from sqlalchemy import or_
from datetime import datetime, UTC
from app.extensions import db
import markdown2
from app.models.role import Permission
from app.models.comment import Comment
from app.models.tag import Tag
from app.models.category import Category
from . import blog_bp

# 延迟导入以避免循环导入
from app.services.category import CategoryService
from app.models.post import Post, PostStatus

# 创建服务实例
post_service = PostService()
comment_service = CommentService()
category_service = CategoryService()
tag_service = TagService()
user_service = UserService()

@blog_bp.route('/')
def index():
    """博客首页"""
    try:
        page = request.args.get('page', 1, type=int)
        per_page = current_app.config['POSTS_PER_PAGE']
        
        # 获取文章列表
        pagination = post_service.get_post_list(page=page, per_page=per_page)
        posts = pagination.items if pagination else []
        
        # 不再调用 post_service.get_archives()，直接使用空字典
        archives = {}
        categories = category_service.get_all_categories()
        
        # 获取每个分类的文章数量
        category_post_counts = {}
        for category in categories:
            try:
                query = Post.query.filter(
                    Post.category_id == category.id,
                    Post.status == PostStatus.PUBLISHED
                )
                category_post_counts[category.id] = query.count()
            except Exception as e:
                current_app.logger.error(f"获取分类 {category.id} 的文章数量失败: {str(e)}")
                category_post_counts[category.id] = 0
        
        current_app.logger.info("正在获取标签列表...")
        tags = tag_service.get_all_tags()
        current_app.logger.info(f"获取到 {len(tags)} 个标签")
        
        # 获取每个标签的文章数量
        tag_post_counts = {}
        for tag in tags:
            try:
                query = Post.query.filter(
                    Post.tags.any(id=tag.id),
                    Post.status == PostStatus.PUBLISHED
                )
                tag_post_counts[tag.id] = query.count()
                current_app.logger.info(f"标签: {tag.name}, 文章数: {tag_post_counts[tag.id]}")
            except Exception as e:
                current_app.logger.error(f"获取标签 {tag.id} 的文章数量失败: {str(e)}")
                tag_post_counts[tag.id] = 0
        
        return render_template('blog/index.html',
                            posts=posts,
                            pagination=pagination,
                            archives=archives,
                            categories=categories,
                            category_post_counts=category_post_counts,
                            tags=tags,
                            tag_post_counts=tag_post_counts,
                            comment_service=comment_service)
    except Exception as e:
        current_app.logger.error(f"访问首页失败: {str(e)}")
        return render_template('blog/error.html', error_message='服务器内部错误'), 500

@blog_bp.route('/post/<int:post_id>', methods=['GET'])
def post_detail(post_id):
    """文章详情页"""
    try:
        # 获取文章
        post = db.session.get(Post, post_id)
        if not post:
            current_app.logger.error(f"文章不存在: {post_id}")
            abort(404)

        # 增加浏览量
        post.view_count += 1
        db.session.commit()

        # 获取评论列表
        comments = comment_service.get_post_comments(post_id)

        # 获取上一篇和下一篇文章
        prev_post = post_service.get_prev_post(post)
        next_post = post_service.get_next_post(post)

        # 获取相关文章
        related_posts = post_service.get_related_posts(post)

        # 获取分类和标签
        categories = category_service.get_all_categories()
        tags = tag_service.get_all_tags()

        # 获取最新文章
        recent_posts = Post.query.filter_by(status=PostStatus.PUBLISHED).order_by(Post.created_at.desc()).limit(5).all()
        
        # 获取最新评论
        recent_comments = Comment.query.filter_by(status=CommentStatus.APPROVED).order_by(Comment.created_at.desc()).limit(5).all()

        # 获取每个分类的文章数量
        category_post_counts = {}
        for category in categories:
            try:
                query = Post.query.filter(
                    Post.category_id == category.id,
                    Post.status == PostStatus.PUBLISHED
                )
                category_post_counts[category.id] = query.count()
            except Exception as e:
                current_app.logger.error(f"获取分类 {category.id} 的文章数量失败: {str(e)}")
                category_post_counts[category.id] = 0

        # 获取每个标签的文章数量
        tag_post_counts = {}
        for tag in tags:
            try:
                query = Post.query.filter(
                    Post.tags.any(id=tag.id),
                    Post.status == PostStatus.PUBLISHED
                )
                tag_post_counts[tag.id] = query.count()
            except Exception as e:
                current_app.logger.error(f"获取标签 {tag.id} 的文章数量失败: {str(e)}")
                tag_post_counts[tag.id] = 0

        # 准备页面数据
        page_data = {
            'post': post,
            'comments': comments,
            'prev_post': prev_post,
            'next_post': next_post,
            'related_posts': related_posts,
            'categories': categories,
            'category_post_counts': category_post_counts,
            'tags': tags,
            'tag_post_counts': tag_post_counts,
            'recent_posts': recent_posts,
            'recent_comments': recent_comments,
            'current_user': {
                'is_authenticated': current_user.is_authenticated,
                'id': current_user.id if current_user.is_authenticated else None,
                'username': current_user.username if current_user.is_authenticated else None
            }
        }

        return render_template('blog/post.html', **page_data)
    except Exception as e:
        current_app.logger.error(f"获取文章详情失败: {str(e)}")
        flash('获取文章详情失败', 'error')
        return render_template('blog/error.html', error_message='获取文章详情失败'), 500

@blog_bp.route('/post/<int:post_id>/comment', methods=['POST'])
def create_comment(post_id):
    """创建评论"""
    try:
        # 获取JSON格式的评论数据
        data = request.get_json()
        if not data:
            return jsonify({
                'success': False,
                'message': '无效的请求数据'
            }), 400
            
        content = data.get('content')
        parent_id = data.get('parent_id')
        
        # 获取当前用户
        user = current_user if current_user.is_authenticated else None
        
        # 创建评论
        result = comment_service.create_comment(
            post_id=post_id,
            content=content,
            author_id=user.id if user else None,
            nickname=data.get('nickname'),
            email=data.get('email'),
            parent_id=parent_id
        )
        
        if result['success']:
            return jsonify({
                'success': True,
                'message': '评论创建成功',
                'comment': result['comment']
            })
        else:
            return jsonify({
                'success': False,
                'message': result['message']
            }), 400
    except Exception as e:
        current_app.logger.error(f"创建评论失败: {str(e)}")
        return jsonify({
            'success': False,
            'message': '评论创建失败'
        }), 500


@blog_bp.route('/category/<int:category_id>')
def category(category_id):
    """分类页面"""
    try:
        page = request.args.get('page', 1, type=int)
        per_page = 10
        
        # 获取分类下的文章
        pagination = post_service.get_posts_by_category(category_id, page, per_page)
        posts = pagination.items
        
        # 获取分类信息
        category = category_service.get_category_by_id(category_id)
        if not category:
            abort(404)
        
        return render_template('blog/category.html',
                            category=category,
                            posts=posts,
                            pagination=pagination)
    except Exception as e:
        current_app.logger.error(f"获取分类页面失败: {str(e)}")
        return render_template('blog/error.html', error_message='服务器内部错误'), 500

@blog_bp.route('/tag/<int:tag_id>')
def tag(tag_id):
    """标签页面"""
    try:
        page = request.args.get('page', 1, type=int)
        per_page = 10
        
        # 获取标签下的文章
        pagination = post_service.get_posts_by_tag(tag_id, page, per_page)
        posts = pagination.items
        
        # 获取标签信息
        tag = tag_service.get_tag_by_id(tag_id)
        if not tag:
            abort(404)
        
        return render_template('blog/tag.html',
                            tag=tag,
                            posts=posts,
                            pagination=pagination)
    except Exception as e:
        current_app.logger.error(f"获取标签页面失败: {str(e)}")
        return render_template('blog/error.html', error_message='服务器内部错误'), 500

@blog_bp.route('/search')
def search():
    """搜索页面"""
    try:
        query = request.args.get('q', '')
        page = request.args.get('page', 1, type=int)
        per_page = 10
        
        if not query:
            return redirect(url_for('blog.index'))
        
        # 搜索文章
        pagination = post_service.search_posts(query, page, per_page)
        posts = pagination.items
        
        return render_template('blog/search.html',
                            query=query,
                            posts=posts,
                            pagination=pagination)
    except Exception as e:
        current_app.logger.error(f"搜索失败: {str(e)}")
        return render_template('blog/error.html', error_message='服务器内部错误'), 500

@blog_bp.route('/about')
def about():
    """关于页面"""
    try:
        # 准备关于页面的数据
        about_data = {
            'blog_name': current_app.config.get('BLOG_NAME', 'MyBlog'),
            'blog_description': current_app.config.get('BLOG_DESCRIPTION', '这是一个基于Flask的个人博客系统'),
            'author': current_app.config.get('BLOG_AUTHOR', 'Admin'),
            'created_at': current_app.config.get('BLOG_CREATED_AT', '2024'),
            'github': current_app.config.get('GITHUB_URL', 'https://github.com'),
            'email': current_app.config.get('CONTACT_EMAIL', 'admin@example.com'),
            # 统计数据 - 使用安全的计数方式
            'post_count': Post.query.filter(
                (Post.status == PostStatus.PUBLISHED) | (Post.status == PostStatus.ARCHIVED)
            ).count(),
            'category_count': Category.query.count(),
            'tag_count': Tag.query.count(),
            'comment_count': Comment.query.filter_by(status=CommentStatus.APPROVED).count(),
            # 当前年份
            'current_year': datetime.now().year
        }
        
        # 调试信息
        current_app.logger.info(f"关于页面数据: {about_data}")
        
        return render_template('blog/about.html', about=about_data, now=datetime.now())
    except Exception as e:
        current_app.logger.error(f"加载关于页面失败: {str(e)}")
        import traceback
        current_app.logger.error(traceback.format_exc())
        return render_template('blog/error.html', error_message='服务器内部错误'), 500

@blog_bp.route('/categories')
def categories():
    """分类列表页面"""
    try:
        categories = category_service.get_categories_with_post_count()
        return render_template('blog/categories.html', categories=categories)
    except Exception as e:
        current_app.logger.error(f"获取分类列表失败: {str(e)}")
        return render_template('blog/error.html', error_message='服务器内部错误'), 500

@blog_bp.route('/tags')
def tags():
    """标签列表页面"""
    try:
        tags = tag_service.get_all_tags()
        return render_template('blog/tags.html', tags=tags)
    except Exception as e:
        current_app.logger.error(f"获取标签列表失败: {str(e)}")
        return render_template('blog/error.html', error_message='服务器内部错误'), 500

@blog_bp.route('/archive')
@blog_bp.route('/archive/<date>')
def archive(date=None):
    """
    文章归档页面
    :param date: 归档日期，格式为 yyyy-MM
    :return:
    """
    try:
        # 直接使用ORM查询所有已发布和归档的文章
        from app.models.post import Post, PostStatus
        from sqlalchemy import or_
        
        # 输出调试信息
        current_app.logger.info("开始处理归档页面请求...")
        
        # 查询所有已发布和已归档的文章
        all_posts = Post.query.filter(
            or_(
                Post.status == PostStatus.PUBLISHED,
                Post.status == PostStatus.ARCHIVED
            )
        ).order_by(Post.created_at.desc()).all()
        
        current_app.logger.info(f"查询到 {len(all_posts)} 篇文章")
        for post in all_posts:
            current_app.logger.info(f"文章ID: {post.id}, 标题: {post.title}, 状态: {post.status}")
        
        # 按年月分组归档
        archives = {}
        for post in all_posts:
            if not post.created_at:
                continue
            key = f"{post.created_at.year}-{post.created_at.month:02d}"
            if key not in archives:
                archives[key] = []
            archives[key].append(post)
        
        # 创建归档字典，按年月组织
        archive_dict = {}
        sorted_years = []
        
        # 遍历所有归档信息
        for key, posts in archives.items():
            # 分割年月
            year, month = key.split('-')
            year = int(year)
            month = int(month)
            
            # 添加到归档字典
            if year not in archive_dict:
                archive_dict[year] = {}
                sorted_years.append(year)
            
            archive_dict[year][month] = posts
            
            # 记录日志
            current_app.logger.info(f"{year}年{month}月: {len(posts)}篇文章")
        
        # 对年份进行排序（降序）
        sorted_years.sort(reverse=True)
        
        return render_template('blog/archive.html',
                            archive_dict=archive_dict,
                            sorted_years=sorted_years)
                            
    except Exception as e:
        current_app.logger.error(f"获取归档页面失败: {str(e)}")
        import traceback
        current_app.logger.error(traceback.format_exc())
        return render_template('blog/error.html', error_message='服务器内部错误'), 500

@blog_bp.route('/login', methods=['GET', 'POST'])
def login():
    """博客前台登录视图"""
    try:
        if current_user.is_authenticated:
            return redirect(url_for('blog.index'))
        
        form = LoginForm()
        if form.validate_on_submit():
            user = user_service.get_user_by_username(form.username.data)
            
            if user and user.verify_password(form.password.data):
                # 检查是否是管理员用户试图从博客前台登录
                is_admin = False
                for role in user.roles:
                    if role.permissions & (Permission.ADMIN.value | Permission.SUPER_ADMIN.value):
                        is_admin = True
                        break
                        
                if is_admin:
                    flash('管理员用户请从管理后台登录', 'danger')
                    return redirect(url_for('blog.login'))
                    
                # 普通用户登录成功
                login_user(user, remember=form.remember_me.data)
                flash('登录成功', 'success')
                return redirect(url_for('blog.index'))
            else:
                flash('用户名或密码错误', 'danger')
                
        return render_template('blog/login.html', form=form)
    except Exception as e:
        current_app.logger.error(f"用户登录失败: {str(e)}")
        return render_template('blog/error.html', error_message='服务器内部错误'), 500

@blog_bp.route('/logout')
@login_required
def logout():
    """博客前台退出"""
    try:
        logout_user()
        flash('您已退出登录', 'success')
        return redirect(url_for('blog.index'))
    except Exception as e:
        current_app.logger.error(f"用户退出失败: {str(e)}")
        flash('退出失败，请稍后再试', 'error')
        return redirect(url_for('blog.index'))

@blog_bp.route('/archive_test')
def archive_test():
    """
    测试归档页面，直接使用SQL获取文章
    """
    try:
        from app.extensions import db
        from sqlalchemy import text
        from app.models.post import Post
        
        # 直接使用原生SQL查询获取所有文章，包括归档状态
        sql = text("""
            SELECT id, title, content, created_at, category_id, status
            FROM posts 
            ORDER BY created_at DESC
        """)
        
        result = db.session.execute(sql)
        posts_data = []
        
        for row in result:
            posts_data.append({
                'id': row.id,
                'title': row.title, 
                'status': row.status,
                'created_at': row.created_at
            })
        
        # 返回结果
        from flask import jsonify
        return jsonify({
            'total_posts': len(posts_data),
            'posts': posts_data
        })
                            
    except Exception as e:
        from flask import current_app
        current_app.logger.error(f"获取归档测试页面失败: {str(e)}")
        import traceback
        current_app.logger.error(traceback.format_exc())
        return {'error': str(e)}, 500

@blog_bp.route('/archive_sql')
def archive_sql():
    """
    使用直接SQL查询的归档页面
    """
    try:
        import sqlite3
        from datetime import datetime
        
        # 连接SQLite数据库
        db_path = '/data/myblog/instance/blog-dev.db'
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # 查询所有已发布和已归档的文章
        cursor.execute("""
            SELECT p.id, p.title, p.created_at, c.id as category_id, c.name as category_name
            FROM posts p
            LEFT JOIN categories c ON p.category_id = c.id
            WHERE p.status = 'PUBLISHED' OR p.status = 'ARCHIVED'
            ORDER BY p.created_at DESC
        """)
        
        rows = cursor.fetchall()
        current_app.logger.info(f"直接SQL查询到 {len(rows)} 篇文章")
        
        # 打印文章状态
        cursor.execute("SELECT status, COUNT(*) as count FROM posts GROUP BY status")
        status_counts = cursor.fetchall()
        for status in status_counts:
            current_app.logger.info(f"状态: {status['status']}, 数量: {status['count']}")
        
        # 创建文章对象列表
        all_posts = []
        for row in rows:
            # 创建一个简单的类来存储文章数据
            class PostObj:
                pass
            
            post = PostObj()
            post.id = row['id']
            post.title = row['title']
            
            # 处理创建时间
            created_at = row['created_at']
            if isinstance(created_at, str):
                try:
                    post.created_at = datetime.fromisoformat(created_at)
                except:
                    post.created_at = datetime.now()  # 默认值
            else:
                post.created_at = created_at
            
            # 处理分类
            if row['category_id']:
                class CategoryObj:
                    pass
                
                category = CategoryObj()
                category.id = row['category_id']
                category.name = row['category_name']
                post.category = category
            else:
                post.category = None
            
            all_posts.append(post)
            current_app.logger.info(f"添加文章: ID={post.id}, 标题={post.title}, 创建时间={post.created_at}")
        
        # 按年月分组归档
        archives = {}
        for post in all_posts:
            if not post.created_at:
                continue
            key = f"{post.created_at.year}-{post.created_at.month:02d}"
            if key not in archives:
                archives[key] = []
            archives[key].append(post)
        
        # 创建归档字典，按年月组织
        archive_dict = {}
        sorted_years = []
        
        # 遍历所有归档信息
        for key, posts in archives.items():
            # 分割年月
            year, month = key.split('-')
            year = int(year)
            month = int(month)
            
            # 添加到归档字典
            if year not in archive_dict:
                archive_dict[year] = {}
                sorted_years.append(year)
            
            archive_dict[year][month] = posts
            current_app.logger.info(f"{year}年{month}月: {len(posts)}篇文章")
        
        # 对年份进行排序（降序）
        sorted_years.sort(reverse=True)
        
        # 关闭数据库连接
        conn.close()
        
        return render_template('blog/archive.html',
                              archive_dict=archive_dict,
                              sorted_years=sorted_years)
        
    except Exception as e:
        current_app.logger.error(f"SQL归档页面出错: {str(e)}")
        import traceback
        current_app.logger.error(traceback.format_exc())
        return render_template('blog/error.html', error_message='服务器内部错误'), 500

