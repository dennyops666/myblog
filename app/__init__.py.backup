"""
Flask应用程序工厂模块
包含创建应用实例的工厂函数
"""

import time
import uuid
import json
import pytz
import random
import sqlite3
import datetime
from operator import itemgetter
from datetime import datetime, timedelta

from flask import Flask, render_template, redirect, url_for, current_app, request, flash, session, abort, jsonify, make_response
from flask_login import login_required, current_user
from sqlalchemy import or_, text
from werkzeug.exceptions import HTTPException

from app.extensions import init_app
from app.config import DevelopmentConfig
from app.models.user import User
from app.models.role import Role
from app.models.comment import Comment, CommentStatus
from app.models.post import Post, PostStatus
from app.models.tag import Tag
from app.services.post import PostService
from app.utils.filters import *
from app.utils.logging import setup_logging

def register_blueprints(app):
    """注册蓝图"""
    # 根路由重定向到博客首页
    @app.route("/")
    def index():
        return redirect(url_for("blog.index"))
    
    # 导入蓝图
    from app.controllers.blog import blog_bp as blog_blueprint
    from app.controllers.admin import admin_bp as admin_blueprint
    from app.views.auth import bp as auth_blueprint
    
    # 注册蓝图
    app.register_blueprint(blog_blueprint, url_prefix="/blog")
    app.register_blueprint(admin_blueprint, url_prefix="/admin", name="admin_dashboard")
    app.register_blueprint(auth_blueprint)
    
    # 预览文章的路由
    @app.route("/admin/post/preview", methods=["POST"])
    @login_required
    def post_preview():
        """预览文章内容"""
        return redirect(url_for("admin_main.index"))
    
    # 添加旧的admin/posts重定向到新的admin/post路由
    @app.route('/admin/posts')
    @login_required
    def admin_posts_redirect():
        """将旧的文章列表URL重定向到新的URL"""
        return redirect(url_for('admin_dashboard.post.index'))
    
    # 添加旧的admin/posts/new重定向到新的admin/post/create路由
    @app.route('/admin/posts/new')
    @login_required
    def admin_posts_new_redirect():
        """将旧的创建文章URL重定向到新的URL"""
        return redirect(url_for('admin_dashboard.post.create'))
    
    # 添加旧的admin/posts/<id>/edit重定向到新的admin/post/<id>/edit路由
    @app.route('/admin/posts/<int:post_id>/edit')
    @login_required
    def admin_posts_edit_redirect(post_id):
        """将旧的编辑文章URL重定向到新的URL"""
        return redirect(url_for('admin_dashboard.post.edit', post_id=post_id))
    
    # 添加旧的/admin/settings重定向
    @app.route('/admin/settings')
    @login_required
    def admin_settings_redirect():
        """将旧的设置URL重定向到新的URL"""
        return redirect(url_for('admin_dashboard.settings'))
    
    # 添加旧的/admin/categories重定向
    @app.route('/admin/categories')
    @login_required
    def admin_categories_redirect():
        """将旧的分类URL重定向到新的URL"""
        return redirect(url_for('admin_dashboard.category.index'))
    
    # 添加旧的/admin/tags重定向
    @app.route('/admin/tags')
    @login_required
    def admin_tags_redirect():
        """将旧的标签URL重定向到新的URL"""
        return redirect(url_for('admin_dashboard.tag.index'))
    
    # 添加旧的/admin/users重定向
    @app.route('/admin/users')
    @login_required
    def admin_users_redirect():
        """将旧的用户URL重定向到新的URL"""
        return redirect(url_for('admin_dashboard.user.index'))
    
    # 添加旧的/admin/comments重定向
    @app.route('/admin/comments')
    @login_required
    def admin_comments_redirect():
        """将旧的评论URL重定向到新的URL"""
        return redirect(url_for('admin_dashboard.comment.index'))
    
    # 添加评论管理操作路由
    @app.route('/admin/comment/approve/<int:comment_id>', methods=['POST'])
    @login_required
    def comment_approve(comment_id):
        """批准评论的路由"""
        from app.services import get_comment_service
        comment_service = get_comment_service()
        result = comment_service.approve_comment(comment_id)
        if result['status'] == 'success':
            flash('评论已批准', 'success')
        else:
            flash(result['message'], 'error')
        return redirect(url_for('admin_dashboard.comment.index'))
        
    @app.route('/admin/comment/reject/<int:comment_id>', methods=['POST'])
    @login_required
    def comment_reject(comment_id):
        """拒绝评论的路由"""
        from app.services import get_comment_service
        comment_service = get_comment_service()
        result = comment_service.reject_comment(comment_id)
        if result['status'] == 'success':
            flash('评论已拒绝', 'success')
        else:
            flash(result['message'], 'error')
        return redirect(url_for('admin_dashboard.comment.index'))
        
    @app.route('/admin/comment/delete/<int:comment_id>', methods=['POST'])
    @login_required
    def comment_delete(comment_id):
        """删除评论的路由"""
        from app.services import get_comment_service
        comment_service = get_comment_service()
        result = comment_service.delete_comment(comment_id)
        if result['status'] == 'success':
            flash('评论已删除', 'success')
        else:
            flash(result['message'], 'error')
        return redirect(url_for('admin_dashboard.comment.index'))
    
    @app.route('/admin/profile')
    @login_required
    def admin_profile_redirect():
        """将旧的个人资料页面重定向到新的URL"""
        return redirect(url_for('admin_dashboard.profile'))

def create_app(test_config=None):
    """创建并配置应用"""
    app = Flask(__name__, instance_relative_config=True)
    
    # 配置应用
    app.config.from_object(DevelopmentConfig)
    
    # 添加禁用缓存的中间件
    @app.after_request
    def add_no_cache_headers(response):
        """为所有响应添加禁止缓存的头部"""
        # 不为静态资源添加缓存头
        if not request.path.startswith("/static/"):
            response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate, max-age=0"
            response.headers["Pragma"] = "no-cache"
            response.headers["Expires"] = "-1"
        return response
        
    # 初始化扩展
    init_app(app)
    
    # 注册蓝图
    register_blueprints(app)
    
    # 注册自定义过滤器
    from app.utils.filters import init_filters
    init_filters(app)
        
    # 注册错误处理器
    @app.errorhandler(404)
    def page_not_found(e):
        return render_template("errors/404.html"), 404
    
    @app.errorhandler(500)
    def internal_server_error(e):
        return render_template("errors/500.html"), 500
    
    # 启用CORS
    @app.after_request
    def add_cors_headers(response):
        """添加CORS头部"""
        response.headers["Access-Control-Allow-Origin"] = "*"
        response.headers["Access-Control-Allow-Headers"] = "Content-Type,Authorization"
        response.headers["Access-Control-Allow-Methods"] = "GET,PUT,POST,DELETE,OPTIONS"
        return response
    
    # 返回应用实例
    return app

def fix_anonymous_comments_status():
    """修复匿名评论的状态"""
    try:
        # 直接使用SQL更新状态
        connection = sqlite3.connect(current_app.config['SQLALCHEMY_DATABASE_URI'].replace('sqlite:///', ''))
        cursor = connection.cursor()
        cursor.execute("UPDATE comments SET status = ? WHERE status = ?", (CommentStatus.APPROVED.value, 0))
        fixed_count = cursor.rowcount
        connection.commit()
        connection.close()
        
        if fixed_count > 0:
            current_app.logger.info(f"已自动修正 {fixed_count} 条匿名评论的状态")
    except Exception as e:
        current_app.logger.error(f"修复匿名评论状态失败: {str(e)}")

def register_error_handlers(app):
    """注册错误处理器"""
    
    @app.errorhandler(404)
    def page_not_found(e):
        return render_template('errors/404.html'), 404
    
    @app.errorhandler(500)
    def internal_server_error(e):
        return render_template('errors/500.html'), 500
    
    @app.errorhandler(403)
    def forbidden(e):
        return render_template('errors/403.html'), 403
    
    @app.errorhandler(HTTPException)
    def handle_http_exception(e):
        return render_template('errors/generic.html', error=e), e.code

