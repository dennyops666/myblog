"""
文件名：user.py
描述：用户管理控制器（简化版）
作者：denny
修改日期：2025-03-26
"""

import traceback
from flask import Blueprint, render_template, request, redirect, url_for, jsonify, current_app, flash
from flask_login import login_required, current_user
from werkzeug.security import generate_password_hash
from app.extensions import db
from app.models.user import User
from app.models.role import Role
from app.services.operation_log import operation_log_service
from app.decorators import admin_required
from app.forms.auth import RegisterForm

# 初始化蓝图
user_bp = Blueprint('user', __name__)

def get_role_service():
    """获取角色服务实例，避免循环导入"""
    from app.services.role_service import RoleService
    return RoleService()

def get_user_service():
    """获取用户服务实例，避免循环导入"""
    from app.services.user import UserService
    return UserService()

def is_super_admin_user(user):
    """检查用户是否是超级管理员"""
    # 检查用户属性
    if hasattr(user, 'is_super_admin') and user.is_super_admin:
        return True
    
    # 检查用户角色
    if hasattr(user, 'roles'):
        for role in user.roles:
            if role.name == 'super_admin':
                return True
    
    # 检查用户名或ID
    if user.username == 'admin' or user.id == 1:
        return True
    
        return False

@user_bp.route('/')
@login_required
@admin_required
def index():
    """用户列表页面"""
    try:
        # 获取所有用户
        all_users = User.query.all()
        
        # 统计信息
        stats = {
            'total': len(all_users),
            'active': sum(1 for u in all_users if u.is_active),
            'inactive': sum(1 for u in all_users if not u.is_active)
        }
        
        # 获取可用角色
        roles = Role.query.all()
    
    # 记录操作日志
    operation_log_service.log_operation(
        user=current_user,
        action='查看用户列表',
    details=f'成功查看用户列表，共 {len(all_users)} 个用户',
        result='success'
            )
            
        # 返回模板
            return render_template(
                'admin/user/list.html',
            users=all_users,
                stats=stats,
                                     roles=roles,
            pagination=None
        )
    except Exception as e:
        current_app.logger.error(f'获取用户列表时发生错误: {str(e)}')
        current_app.logger.exception(e)
        
        # 记录操作日志
        operation_log_service.log_operation(
            user=current_user,
            action='查看用户列表',
            details=f'获取用户列表失败: {str(e)}',
            result='error'
        )
        
        # 返回错误页面
        return render_template(
            'admin/error.html',
            error='获取用户列表失败',
            error_code=500,
            show_debug_info=current_app.debug,
            error_details={
                'message': str(e),
                'type': type(e).__name__,
                'traceback': traceback.format_exc() if current_app.debug else None
            },
            suggestion='请稍后重试或联系管理员'
        ), 500

@user_bp.route('/<int:user_id>')
@login_required
@admin_required
def view(user_id):
    """查看用户详情"""
    try:
        user = User.query.get_or_404(user_id)
        return render_template('admin/user/view.html', user=user)
    except Exception as e:
        current_app.logger.error(f'查看用户详情时发生错误: {str(e)}')
        flash(f'查看用户详情失败: {str(e)}', 'error')
        return redirect(url_for('.index'))

@user_bp.route('/create', methods=['GET', 'POST'])
@login_required
@admin_required
def create():
    """创建用户页面"""
    try:
        # 检查是否已存在超级管理员用户
        admin_exists = False
        admin_user = User.query.filter(User.username == 'admin').first()
        if admin_user:
            admin_exists = True
            current_app.logger.debug("超级管理员用户已存在，ID=%s", admin_user.id)
        
        # 获取可用角色 - 排除超级管理员角色
        roles = get_role_service().get_available_roles()
        
        # 确保roles中没有super_admin角色（超级管理员用户只能有一个）
        roles = [role for role in roles if role.name != 'super_admin']
        
        # 创建表单对象
        form = RegisterForm()
        
        if request.method == 'POST':
            if form.validate_on_submit():
                # 检查用户名是否是admin（超级管理员保留名）
                if form.username.data.lower() == 'admin':
                    if admin_exists:
                        flash('超级管理员用户已存在，不能创建多个超级管理员', 'danger')
                    else:
                        flash('超级管理员用户只能通过系统初始化创建，不能手动创建', 'danger')
                    return render_template('admin/user/create.html', roles=roles, form=form, is_create=True, admin_exists=admin_exists, is_edit=False)
                
                # 检查用户名是否已存在
                existing_user = User.query.filter(User.username == form.username.data).first()
                if existing_user:
                    flash(f'用户名 "{form.username.data}" 已存在', 'danger')
                    return render_template('admin/user/create.html', roles=roles, form=form, is_create=True, admin_exists=admin_exists, is_edit=False)
                
                # 创建用户
                user = User(
                    username=form.username.data,
                    email=form.email.data
                )
                
                # 设置用户昵称（如果有）
                if hasattr(form, 'nickname') and form.nickname.data:
                    user.nickname = form.nickname.data
                
                # 设置用户密码
                if form.password.data and form.password2.data and form.password.data == form.password2.data:
                    user.password_hash = generate_password_hash(form.password.data)
                    current_app.logger.info(f"设置用户 {form.username.data} 的密码")
                else:
                    flash('创建用户时必须提供有效的密码', 'danger')
                    return render_template('admin/user/create.html', roles=roles, form=form, is_create=True, admin_exists=admin_exists, is_edit=False)
                
                # 设置用户激活状态
                user.is_active = request.form.get('is_active') == 'on'
                current_app.logger.debug(f"创建用户 {form.username.data} 的激活状态为: {user.is_active}, 表单数据: {request.form.get('is_active')}")
                
                # 处理用户角色
                role_ids = request.form.getlist('roles')
                if role_ids:
                    # 获取选中的角色对象
                    selected_roles = Role.query.filter(Role.id.in_(role_ids)).all()
                    # 确保没有超级管理员角色
                    selected_roles = [r for r in selected_roles if r.name != 'super_admin']
                    # 更新用户角色
                    user.roles = selected_roles
                    current_app.logger.debug(f"更新用户 {user.username} 的角色为: {[r.name for r in selected_roles]}")
                else:
                    # 如果没有选择任何角色，则设置为空列表
                    user.roles = []
                    current_app.logger.debug(f"用户 {user.username} 没有选择任何角色")
                
                # 保存用户
                db.session.add(user)
                db.session.commit()
                
                # 记录操作日志
                operation_log_service.log_operation(
                    user=current_user,
                    action='创建用户',
                    details=f'成功创建用户 {form.username.data}',
                    result='success'
                )
                
                flash('用户创建成功', 'success')
                return redirect(url_for('.index'))
            else:
                # 显示表单验证错误
                for field, errors in form.errors.items():
                    for error in errors:
                        flash(f'{getattr(form, field).label.text}: {error}', 'danger')
        
        return render_template('admin/user/create.html', roles=roles, form=form, is_create=True, admin_exists=admin_exists, is_edit=False)
    except Exception as e:
        current_app.logger.error(f'创建用户时发生错误: {str(e)}')
        flash(f'创建用户失败: {str(e)}', 'danger')
        return redirect(url_for('.index'))

@user_bp.route('/<int:user_id>/edit', methods=['GET', 'POST'])
@login_required
@admin_required
def edit(user_id):
    """编辑用户页面"""
    try:
        user = User.query.get_or_404(user_id)
        
        # 检查是否是超级管理员用户
        is_super_admin = is_super_admin_user(user)
        
        # 获取可用角色
        if is_super_admin:
            # 超级管理员只能与super_admin角色关联，且不允许修改
            roles = Role.query.filter_by(name='super_admin').all()
            if not roles:
                current_app.logger.error("super_admin角色不存在，请检查数据库")
                flash("系统错误：super_admin角色不存在", "danger")
                return redirect(url_for('.index'))
        else:
            # 非超级管理员不能看到super_admin角色
            roles = get_role_service().get_available_roles()
            roles = [role for role in roles if role.name != 'super_admin']
        
        # 创建表单对象并用用户数据填充
        form = RegisterForm(obj=user)
        
        if request.method == 'POST':
            # 超级管理员不能修改任何信息，除了密码和邮箱
            if is_super_admin:
                # 检查用户名是否被修改
                if form.username.data != user.username:
                    flash('超级管理员用户名不能被修改', 'danger')
                    return render_template('admin/user/edit.html', user=user, roles=roles, form=form, is_super_admin=is_super_admin, is_edit=True, is_admin_user=is_super_admin)
                
                # 检查是否试图修改角色
                role_ids = request.form.getlist('roles') if 'roles' in request.form else []
                super_admin_role = next((r for r in roles if r.name == 'super_admin'), None)
                if super_admin_role and str(super_admin_role.id) not in role_ids:
                    flash('超级管理员用户必须与超级管理员角色关联', 'danger')
                    return render_template('admin/user/edit.html', user=user, roles=roles, form=form, is_super_admin=is_super_admin, is_edit=True, is_admin_user=is_super_admin)
            
            if form.validate_on_submit():
                # 更新用户信息
                if not is_super_admin:
                    # 普通用户可以修改用户名，但不能改为admin
                    if form.username.data.lower() == 'admin' and user.username.lower() != 'admin':
                        flash('用户名"admin"已被保留，请使用其他用户名', 'danger')
                        return render_template('admin/user/edit.html', user=user, roles=roles, form=form, is_super_admin=is_super_admin, is_edit=True, is_admin_user=is_super_admin)
                    
                    user.username = form.username.data
                
                # 邮箱可以修改
                user.email = form.email.data
                
                if hasattr(user, 'nickname') and hasattr(form, 'nickname'):
                    user.nickname = form.nickname.data
                
                # 如果提供了密码，则更新密码
                if form.password.data and form.password2.data and form.password.data == form.password2.data:
                    current_app.logger.info(f"更新用户 {user.username} 的密码")
                    user.password_hash = generate_password_hash(form.password.data)
                elif form.password.data or form.password2.data:
                    current_app.logger.warning(f"用户 {user.username} 的密码字段填写不完整，不更新密码")
                else:
                    current_app.logger.info(f"用户 {user.username} 未提供新密码，保持原密码不变")
                
                # 记录用户更新前的状态
                current_app.logger.info(f"更新用户前状态 - 用户ID: {user.id}, 用户名: {user.username}, 激活状态: {user.is_active}")
                current_app.logger.info(f"表单数据 - is_active: {request.form.get('is_active')}")
                
                # 处理用户激活状态
                if not is_super_admin:  # 超级管理员始终保持激活
                    # 保存原始状态用于比较
                    original_active_state = user.is_active
                    
                    # 直接从表单数据中检查是否有is_active字段，复选框未选中时不会提交
                    user.is_active = request.form.get('is_active') == 'on'
                    current_app.logger.info(f"设置用户 {user.username} 的激活状态: {original_active_state} -> {user.is_active}, 表单数据: {request.form.get('is_active')}")
                    
                    # 处理用户角色
                    role_ids = request.form.getlist('roles')
                    current_app.logger.info(f"表单提交的角色IDs: {role_ids}")
                    
                    if role_ids:
                        # 获取选中的角色对象
                        selected_roles = Role.query.filter(Role.id.in_(role_ids)).all()
                        # 确保没有超级管理员角色
                        selected_roles = [r for r in selected_roles if r.name != 'super_admin']
                        # 更新用户角色
                        user.roles = selected_roles
                        current_app.logger.info(f"更新用户 {user.username} 的角色为: {[r.name for r in selected_roles]}")
                    else:
                        # 如果没有选择任何角色，则设置为空列表
                        user.roles = []
                        current_app.logger.info(f"用户 {user.username} 没有选择任何角色")
                
                # 保存更改
                try:
                    db.session.commit()
                    current_app.logger.info(f"用户更新成功 - 用户ID: {user.id}, 用户名: {user.username}, 当前激活状态: {user.is_active}")
                    
                    # 记录操作日志
                    operation_log_service.log_operation(
                        user=current_user,
                        action='编辑用户',
                        details=f'成功编辑用户 {user.username}',
                        result='success'
                    )
                    
                    flash('用户更新成功', 'success')
                    return redirect(url_for('.index'))
                except Exception as commit_error:
                    db.session.rollback()
                    current_app.logger.error(f"数据库提交失败: {str(commit_error)}")
                    flash(f'数据库提交失败: {str(commit_error)}', 'danger')
                    return render_template('admin/user/edit.html', user=user, roles=roles, form=form, is_super_admin=is_super_admin, is_edit=True, is_admin_user=is_super_admin)
            
            else:
                # 显示表单验证错误
                for field, errors in form.errors.items():
                    for error in errors:
                        flash(f'{getattr(form, field).label.text}: {error}', 'danger')
        
        # 对超级管理员用户禁用用户名和角色字段
        if is_super_admin:
            form.username.render_kw = {'readonly': True, 'disabled': 'disabled'}
        
        return render_template('admin/user/edit.html', user=user, roles=roles, form=form, is_super_admin=is_super_admin, is_edit=True, is_admin_user=is_super_admin)
    except Exception as e:
        current_app.logger.error(f'编辑用户时发生错误: {str(e)}')
        flash(f'编辑用户失败: {str(e)}', 'danger')
        return redirect(url_for('.index'))

@user_bp.route('/<int:user_id>/delete', methods=['POST'])
@login_required
@admin_required
def delete(user_id):
    """删除用户"""
    try:
        user = User.query.get_or_404(user_id)
        
        # 检查是否是超级管理员用户
        is_super_admin = is_super_admin_user(user)
        
        # 防止删除超级管理员、普通管理员或当前用户
        if is_super_admin:
            flash('不能删除超级管理员用户', 'danger')
            return redirect(url_for('.index'))
        elif user.is_admin_user and not is_super_admin:
            flash('不能删除管理员用户', 'danger')
            return redirect(url_for('.index'))
        elif user.id == current_user.id:
            flash('不能删除当前登录用户', 'danger')
            return redirect(url_for('.index'))
        
        username = user.username
        
        # 删除用户
        db.session.delete(user)
        db.session.commit()
        
        # 记录操作日志
        operation_log_service.log_operation(
            user=current_user,
            action='删除用户',
            details=f'成功删除用户 {username}',
            result='success'
        )
        
        flash('用户删除成功', 'success')
        return redirect(url_for('.index'))
    except Exception as e:
        current_app.logger.error(f'删除用户时发生错误: {str(e)}')
        flash(f'删除用户失败: {str(e)}', 'danger')
        return redirect(url_for('.index'))

@user_bp.route('/<int:user_id>/toggle_status', methods=['POST'])
@login_required
@admin_required
def toggle_status(user_id):
    """切换用户状态（启用/禁用）"""
    try:
        user = User.query.get_or_404(user_id)
        
        # 检查是否是超级管理员用户（不能修改超级管理员状态）
        if is_super_admin_user(user):
            flash('不能修改超级管理员状态', 'danger')
            return redirect(url_for('.index'))
        
        # 记录原始状态
        original_status = user.is_active
        
        # 反转用户状态
        user.is_active = not original_status
        
        # 直接调用用户模型方法
        if user.is_active:
            user.activate()
        else:
            user.deactivate()
        
        # 添加详细日志
        current_app.logger.info(f"直接切换用户 {user.username} 状态: {original_status} -> {user.is_active}")
        
        # 保存更改
        db.session.commit()
        
        # 记录操作日志
        operation_log_service.log_operation(
            user=current_user,
            action='切换用户状态',
            details=f'成功将用户 {user.username} 的状态从 {"激活" if original_status else "禁用"} 修改为 {"激活" if user.is_active else "禁用"}',
            result='success'
        )
        
        flash(f'用户 {user.username} 已{"激活" if user.is_active else "禁用"}', 'success')
        return redirect(url_for('.index'))
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f'切换用户状态时发生错误: {str(e)}')
        flash(f'切换用户状态失败: {str(e)}', 'danger')
        return redirect(url_for('.index'))
